predict(lm_3, newdata = ndat2, type = "probs")
#Fehlkassifikationsmatrix
table(true = dat_mlogit$contra, pred = predict(m3, newdata = dat_mlogit))
#Fehlkassifikationsmatrix
table(true = dat_mlogit$contra, pred = predict(lm_3, newdata = dat_mlogit))
FKR <- 1- ((145+80+43)/(145+50+10+73+80+17+35+30+43))
#Fehlklassifikationsmatrix dat_test
table( true= dat_test, pred = predict(lm_3, newdata = dat_test))
#Fehlklassifikationsmatrix dat_test
table( true= dat_test$contra, pred = predict(lm_3, newdata = dat_test))
FKR2 <- 1- ((155+71+37)/(155+40+14+67+71+26+32+38+37))
install.packages("tidyverse")
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, "")) |>
select(unique_id, gender)
View(dat_age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, "")) |>
select(unique_id, gender)
View(dat_age)
View(dat_gender)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
View(dat_gender)
dat_gender %>%
select(gender)
?distinct
dat_gender %>%
count(gender)
data_age_gender <-
full_join(dat_age %>%
dat_gender,
by ="unique_id")
data_age_gender <-
full_join( x = age_temp,
y = age_gender,
by ="unique_id")
data_age_gender <-
full_join( x = dat_age,
y = dat_gender,
by ="unique_id")
View(data_age_gender)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
nrow?
nrow?
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
nrow?
nrow?
?nrow
View(data_amp_summary_subset)
?full_join
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset)
View(data_combined)
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = "unique_id")
View(data_age_gender_subset)
View(data_combined)
View(data_combined)
View(data_combined)
View(data_age_gender_subset)
View(data_selfreport_summary_subset)
View(data_combined)
data_self_reports_and_their_amp_data <-
full_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_self_reports_and_their_amp_data)
data_self_reports_and_their_amp_data <-
left_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_self_reports_and_their_amp_data)
data_amp_data_and_their_self_reports <-
right_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_amp_data_and_their_self_reports)
View(data_combined)
data_combined_2 <-
inner_join(x = data_combined,
y = data_selfreport_summary_subset,
by = "unique_id")
View(data_combined_2)
data_missing_ids <- data_age_gender_subset %>%
full_join(data_amp_summary_subset, by = "unique_id") %>%
full_join(data_selfreport_summary_subset, by = "unique_id")
View(data_missing_ids)
View(data_missing_ids)
data_missing_ids <- data_age_gender_subset %>%
full_join(data_amp_summary_subset, by = "unique_id") %>%
full_join(data_selfreport_summary_subset, by = "unique_id")
data_missing_ids <- combined_data %>%
anti_join(data_unique_id_subset, by = "unique_id")
data_missing_ids <- data_missing_ids %>%
anti_join(data_unique_id_subset, by = "unique_id")
View(data_missing_ids)
data_missing_ids <- data_missing_ids %>%
anti_join(data_unique_id_subset, by = "unique_id") %>%
select(unique_id) %>%
distinct(unique_id)
View(data_missing_ids)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject)
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
slect(unique_id, latenc, blockcode)
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
select(unique_id, block_type, rt)
setwd("/Users/elinweimer/Documents/GitHub/wrangling-course-assignments/reshaping data with pivots/data/raw")
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
dir.create("plots")
library(dplyr)
library(tidyr)
library(tibble)
library(faux)
install.packages("faux")
library(faux)
install.packages("faux")
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
library(readr)
library(knitr)
library(kableExtra)
# set seed for reproducibility
set.seed(123)
data_wide <-
faux::rnorm_multi(n = 100,
vars = 5,
mu = 3,
sd = 1,
r = 0.5,
varnames = paste0("item_", 1:5),
empirical = FALSE) %>%
rownames_to_column(var = "id")
data_wide_likert <- data_wide %>%
mutate(across(starts_with("item_"), ~ round_half_up(.x, digits = 0))) %>%
mutate(across(starts_with("item_"), ~ ifelse(.x < 1, 1, ifelse(.x > 5, 5, .x))))
View(data_wide_likert)
res_alpha <- data_wide_likert %>%
select(starts_with("item_")) %>%
psych::alpha()
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
cronbachs_alpha_estimate <- res_alpha$total$raw_alpha |>
round_half_up(digits = 2)
cronbachs_alpha_estimate
ggplot(data_wide_likert, aes(x = item_1)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_2)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_3)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_4)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
ggplot(data_wide_likert, aes(x = item_5)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw()
data_long <- data_wide_likert %>%
pivot_longer(cols = starts_with("item_"),
names_to = "item",
values_to = "response")
ggplot(data_long, aes(x = response)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
theme_linedraw() +
facet_wrap(~ item)
data_wide_again <- data_long %>%
pivot_wider(names_from = item,
values_from = response)
data_item_and_sum_scores <- data_wide_again %>%
left_join(sum_scores, by = "id")
sum_scores <- data_long %>%
group_by(id) %>%
summarise(sum_score = sum(response))
ggplot(sum_scores, aes(x = sum_score)) +
geom_histogram(binwidth = 1, boundary = -0.5) +
scale_x_continuous(breaks = breaks_pretty(n = 10)) +
theme_linedraw()
data_item_and_sum_scores <- data_wide_again %>%
left_join(sum_scores, by = "id")
#DO NOT use bind_cols weil dann werden einfach Dataframes zusammengewurstelt und nicht nach participant id sortiert, so wie es bei joins gemacht wird
data_wide_again <- data_long %>%
pivot_wider(names_from = item,
values_from = response,
names_prefix = "item_")
View(data_wide_again)
data_wide_again <- data_long %>%
pivot_wider(names_from = item,
values_from = response)
data <- read_csv("data_demographics_raw.csv")
setwd("/Users/elinweimer/Documents/GitHub/wrangling-course-assignments/reshaping data with pivots/data/raw")
setwd("/Users/elinweimer/Documents/GitHub/wrangling-course-assignments/reshaping data with pivots/data/raw")
data <- read_csv("data_demographics_raw.csv")
data <- read_csv("../data/raw/data_demographics_raw.csv")
View(data_long)
View(data)
data_demo_wide_ <- data %>%
pivot_wider(names_from = trialcode,
values_from = latency)
View(data_demo_wide_)
data_demo_wide_ <- data %>%
pivot_wider(names_from = trialcode,
values_from = response)
View(data_demo_wide_)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response)
View(data_demo_wide)
?filter
library(dplyr)
library(tidyr)
library(tibble)
devtools::install_github("debruine/faux")
library(faux)
library(janitor)
library(ggplot2)
library(scales)
library(psych)
library(readr)
library(knitr)
library(kableExtra)
data <- read_csv("../data/raw/data_demographics_raw.csv")
?filter
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender)
View(data_demo_wide)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
filter(!= NA)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
filter(=! NA)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
filter(complete.cases(.))
View(data_demo_wide)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
```
data <- read_csv("../data/raw/data_demographics_raw.csv")
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender)
View(data_demo_wide)
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
filter(!is.na(age) | !is.na(gender))
View(data_demo_wide)
View(data_demo_wide)
data <- read_csv("../data/raw/data_demographics_raw.csv")
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
filter(!is.na(age) | !is.na(gender))
View(data_demo_wide)
data <- read_csv("../data/raw/data_demographics_raw.csv")
data_demo_wide <- data %>%
pivot_wider(names_from = trialcode,
values_from = response) %>%
select(subject, age, gender) %>%
group_by(subject)
View(data_demo_wide)
View(data_demo_wide)
