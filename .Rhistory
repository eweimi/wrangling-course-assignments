library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
View(data_amp_summary_subset)
data_amp_raw
data_amp_raw <- read_csv("data_amp_raw.csv")
data_amp_raw <- read_csv("data_amp_raw.csv")
View(data_amp_raw)
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
data_selfreport_raw <- read_csv("data_selfreport_raw.csv")
# basic tidying
data_selfreport_tidied <- data_selfreport_raw |>
rename(unique_id = subject,
item_type = trialcode) |>
select(unique_id, item_type, response) |>
filter(item_type != "instructions")
View(data_selfreport_raw)
View(data_selfreport_tidied)
data_selfreport_tidied %>%
count(response)
data_selfreport_tidied %>%
count(response) %>%
mutate(response = as.numeric(response))
View(data_selfreport_tidied)
View(data_selfreport_tidied)
data_selfreport_tidied2 <- data_selfreport_tidied %>%
count(response) %>%
mutate(response = as.numeric(response))
data_selfreport_tidied2 <- data_selfreport_tidied %>%
mutate(response = as.numeric(response))
View(data_selfreport_tidied2)
data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_tidied2 %>%
count(unique_id) %>%
count(n)
data_selfreport_tidied2 %>%
count(unique_id) %>%
data_selfreport_tidied2 %>%
count(unique_id) %>%
data_selfreport_tidied2 %>%
count(unique_id) %>%
count(n)
data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_tidied2 %>%
count(unique_id) %>%
count(n)
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_amp_tidied <- data_amp_raw |>
rename(unique_id = subject,
block_type = blockcode,
rt = latency) |>
select(unique_id, block_type, rt) |>
filter(block_type == "test")
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants")
data_selfreport_tidied2 %>%
count(unique_id) %>%
count(n) %>%
filter(n == 3)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id) %>%
count(n) %>%
filter(n == 3)
View(data_selfreport_complete)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_participants")
data_selfreport_tidied2 %>%
count(unique_id, name = "num_participants") %>%
count(num_participants)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_tirals") %>%
count(num_participants)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_tirals") %>%
count(num_trials)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_tirals") %>%
count(num_trials)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_tirals") %>%
count(num_trials)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials")
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
count(num_trials, name = "num_participants")
data_selfreport_complete <- data_selfreport_tidied2 %>%
filter(num_trials == 3)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials")
View(data_selfreport_complete)
View(data_selfreport_tidied2)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials")
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials")
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
filter(num_trials == 3)
View(data_selfreport_complete)
data_selfreport_complete %>%
count(unique_id, name = "num_trials")
View(data_selfreport_complete)
data_selfreport_complete %>%
count(unique_id)
data_selfreport_tidied2 %>%
count(unique_id)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
filter(num_trials != 3)
data_selfreport_complete %>%
count(unique_id)
data_selfreport_complete <- data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
filter(num_trials == 3)
data_selfreport_complete %>%
count(unique_id)
data_selfreport_complete %>%
count(unique_id, name = "num_trials")
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
count(num_trials, name = "num_participants")
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
count(num_trials, name = "num_participants")
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
source("~/.active-rstudio-document", echo=TRUE)
data_selfreport_tidied2 %>%
count(unique_id, name = "num_trials") %>%
data_selfreport_tidied2 %>%
count(unique_id)
source("~/.active-rstudio-document", echo=TRUE)
data_selfreport_tidied2 %>%
count(unique_id)
View(data_selfreport_complete)
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_amp_tidied |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_complete_amp <- data_amp_tidied |>
count(unique_id, name = "n_trials") |>
filter(n_trials == 72)
data_amp_tidied_complete <- data_amp_tidied |>
semi_join(data_complete_amp, by = "unique_id")
# are there duplicates or incomplete data?
# sanity check should have one row
data_amp_tidied_complete |>
count(unique_id, name = "n_trials") |>
count(n_trials, name = "n_participants") |>
arrange(desc(n_participants))
data_selfreport_complete %>%
count(unique_id)
