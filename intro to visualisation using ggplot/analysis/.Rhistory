dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, "")) |>
select(unique_id, gender)
View(dat_age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the gender data out of the raw
dat_gender <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "gender") |>
rename(gender = response) |>
# remove non-numbers or decimals from age
mutate(gender = str_to_lower(gender),
gender = str_remove_all(gender, "[\\d.]"),
gender = na_if(gender, "")) |>
select(unique_id, gender)
View(dat_age)
View(dat_gender)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
# wrangle the age data out of the raw
dat_age <- data_demographics_raw |>
# rename for clarity
rename(unique_id = subject, item = trialcode) |>
# select useful columns
select(unique_id, item, response) |>
# retain rows that we need
filter(item == "age") |>
rename(age = response) |>
# remove non-numbers or decimals from age
mutate(age = str_remove_all(age, "[^\\d.]"),  # retains only digits and decimal points
age = na_if(age, ""),
age = as.numeric(age)) |>
select(unique_id, age)
View(dat_gender)
dat_gender %>%
select(gender)
?distinct
dat_gender %>%
count(gender)
data_age_gender <-
full_join(dat_age %>%
dat_gender,
by ="unique_id")
data_age_gender <-
full_join( x = age_temp,
y = age_gender,
by ="unique_id")
data_age_gender <-
full_join( x = dat_age,
y = dat_gender,
by ="unique_id")
View(data_age_gender)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(dplyr)
library(readr)
nrow?
nrow?
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
library(dplyr)
library(readr)
data_unique_id_subset <- read_csv("data_unique_id_subset.csv")
data_age_gender_subset <- read_csv("data_age_gender_subset.csv")
data_amp_summary_subset <- read_csv("data_amp_summary_subset.csv")
data_selfreport_summary_subset <- read_csv("data_selfreport_summary_subset.csv")
nrow(data_unique_id_subset)
nrow(data_age_gender_subset)
nrow(data_amp_summary_subset)
nrow(data_selfreport_summary_subset)
nrow?
nrow?
?nrow
View(data_amp_summary_subset)
?full_join
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset)
View(data_combined)
data_combined <-
full_join(x = data_amp_summary_subset,
y = data_age_gender_subset,
by = "unique_id")
View(data_age_gender_subset)
View(data_combined)
View(data_combined)
View(data_combined)
View(data_age_gender_subset)
View(data_selfreport_summary_subset)
View(data_combined)
data_self_reports_and_their_amp_data <-
full_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_self_reports_and_their_amp_data)
data_self_reports_and_their_amp_data <-
left_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_self_reports_and_their_amp_data)
data_amp_data_and_their_self_reports <-
right_join(x = data_selfreport_summary_subset,
y = data_amp_summary_subset,
by = "unique_id")
View(data_amp_data_and_their_self_reports)
View(data_combined)
data_combined_2 <-
inner_join(x = data_combined,
y = data_selfreport_summary_subset,
by = "unique_id")
View(data_combined_2)
data_missing_ids <- data_age_gender_subset %>%
full_join(data_amp_summary_subset, by = "unique_id") %>%
full_join(data_selfreport_summary_subset, by = "unique_id")
View(data_missing_ids)
View(data_missing_ids)
data_missing_ids <- data_age_gender_subset %>%
full_join(data_amp_summary_subset, by = "unique_id") %>%
full_join(data_selfreport_summary_subset, by = "unique_id")
data_missing_ids <- combined_data %>%
anti_join(data_unique_id_subset, by = "unique_id")
data_missing_ids <- data_missing_ids %>%
anti_join(data_unique_id_subset, by = "unique_id")
View(data_missing_ids)
data_missing_ids <- data_missing_ids %>%
anti_join(data_unique_id_subset, by = "unique_id") %>%
select(unique_id) %>%
distinct(unique_id)
View(data_missing_ids)
library(dplyr)
library(tidyr)
library(readr)
library(janitor) # for clean_names()
library(stringr)
# # demographics
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
data_amp_performance_criteria <- data_amp_raw
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject)
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
slect(unique_id, latenc, blockcode)
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
data_amp_performance_criteria <- data_amp_raw %>%
rename (unique_id = subject,
block_type = blockcode,
rt = latency) %>%
select(unique_id, block_type, rt)
library(readr)
library(ggplot2)
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
install.packages("devtools")
devtools::install_github("matthewbjane/ThemePark")
library(readr)
library(ggplot2)
library(datasauRus)
library(scales)
library(dplyr)
library(tidyr)
library(plotrix)
library(patchwork)
library(janitor)
library(knitr)
library(kableExtra)
# get data
data_processed <- read_csv("../data/processed/data_processed.csv")
data_after_exclusions <- data_processed |>
filter(exclude_amp == "include" &
n_items == 3 &
gender %in% c("male", "female"))
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = mean_self_report)) +
geom_histogram(binwidth = 1) #Breite der Balken mit "binwidth ver√§ndern
View(data_after_exclusions)
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1)
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9)
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9))
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score")
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 50, 5))
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5))
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5))
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5),
name =  "Frequency")
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5),
name =  "Frequency") +
theme_minimal()
View(data_after_exclusions)
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(bindwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name= "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5),
name =  "Frequency") +
theme_minimal()
ggplot(data = data_after_exclusions,
aes(x = amp_score)) +
geom_histogram(binwidth = 0.1) +
scale_x_continuous(breaks = scales::breaks_pretty(n = 9),
name = "AMP Score") +
scale_y_continuous(breaks = seq(0, 40, 5),
name =  "Frequency") +
theme_minimal()
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density()
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3)
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_y_continuous(name = "AMP Data")
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_y_continuous(name = "AMP Score")
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score")
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density")
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_light()
library(ThemePark)
devtools::install_github("matthewbjane/ThemePark")
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_elf()
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_light()
library(ThemePark)
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_elf()
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_gameofthrones()
# create the summary values to be plotted
summary_amp <- data_after_exclusions %>%
group_by(gender) %>%
summarize(amp_mean = mean(amp_score),
amp_se = plotrix::std.error(amp_score))
# plot these values
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col() +
# geom_bar(stat = "identity") + # NB geom_col is equivalent to geom_bar when stat == "identity
geom_linerange(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se))
# plot these values
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col() +
# geom_bar(stat = "identity") + # NB geom_col is equivalent to geom_bar when stat == "identity
geom_linerange(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se))
ggplot(data = summary_amp,
aes(x = gender,
y = amp_mean)) +
geom_col(fill = "#0b6623", # note that you can specify specific colors using hex codes or names
color = "black",
width = 0.6) +
geom_errorbar(aes(ymin = amp_mean - amp_se,
ymax = amp_mean + amp_se),
width = 0.1,
color = "black") +
labs(title = "Bar Plot of with Standard Errors",
x = "Gender",
y = "Mean AMP score") +
theme_linedraw()
summary_selfreport <- data_after_exclusions %>%
group_by(gender) %>%
summarize(selfreport_mean = mean(mean_self_report),
amp_se = plotrix::std.error(mean_self_report))
ggplot(data= summary_selfreport,
aes( x= gender,
y = selfreport_mean)) +
geom_col()
ggplot(data= summary_selfreport,
aes( x= gender,
y = selfreport_mean)) +
geom_col()+
coord_flip()
summary_selfreport <- data_after_exclusions %>%
group_by(gender) %>%
summarize(selfreport_mean = mean(mean_self_report),
selfreport_se = plotrix::std.error(mean_self_report))
ggplot(data= summary_selfreport,
aes( x= gender,
y = selfreport_mean)) +
geom_col()+
coord_flip()
ggplot( data = data_after_exclusions,
aes( x = amp_score)) +
geom_density(adjust = 1,
color = "#FF69B4",
fill = "darkblue",
alpha = 0.3) +
scale_x_continuous(name = "AMP Score") +
scale_y_continuous(name = "Density") +
theme_barbie()
